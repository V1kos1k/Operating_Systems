Запустить, показать строку процесса-демона после выполнения команды ps -ajx.
//в некоторых системах: ps ajx без дефиса

Вопросы:
q: Что значат состояния Ss Sl?
a:	S - interruptible sleep (waiting for an event to complete)
	s - is a session leader
	l - is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
	L - has pages locked into memory (for real-time and custom IO)
(подробнее: >man ps)

q: Рассказать правила и показать, где в коде они применены
---------------------------------------------------------------------------------------------------
a: Открыть метод demonize в коде и рассказать 6 правил программирования процессов-демонов:
1) вызвать umask для сброса маски создания файлов
	- маска наследуется и может маскировать биты прав доступа (запись, чтение)
2) вызвать fork() и завершить предка
	- чтобы командная оболочка думала, что команда была выполнена
	- чтобы новый процесс гарантированно не был лидером группы, что позволит вызвать setsid (у дочернего процесса id отличный от родителя, а pgid наследуется)
	//ВАЖНОЕ ЗАМЕЧАНИЕ: тут начинаются расхождения, у раго написано "чтобы процесс НЕ был лидером", но рязанова не может постичь величие факта "в группе один процесс, но он не лидер" - поэтому "правильный" ответ "чтобы процесс СТАЛ лидером группы"
3) создать новую сессию, вызвав setsid, тогда процесс станет:
	- лидером новой сессии
	- лидером новой группы процессов
	- лишится управляющего терминала (TTY = ?)
4) сделать корневой каталог текущим рабочим каталогом 
	- если рабочий каталог на смонтированной файловой системе, то её нельзя будет отмонтировать, так как процессы-демоны обычно живут, пока система не перезагрузится
5) закрыть все ненужные открытые файловые дескрипторы, которые процесс-демон может унаследовать и препятствовать их закрытию (для этого нужно сначала получить максимальный номер дескриптора (см. код))
6) такой процесс не связан ни с каким терминальным устройством и не может взаимодействовать с пользователем в интерактивном режиме, даже если он был запущен в рамках интерактивной сессии, он все равно будет переведен в фоновый режим (некоторые процессы-демоны открывают файловые дескрипторы 0 1 и 2 на dev/null - "пустые" stdin, stdout, stderr, что позволяет вызывать в них фунции стандартного ввода вывода, не получая при этом ошибок)
---------------------------------------------------------------------------------------------------

q: Зачем закрывать файловые дескрипторы?
a: Это ненужные процессу-демону дескрипторы, унаследованые от предка, закрытию которых он может препятствовать

q: Зачем сигнал SIGHUP игнорируется в демоне?
a: Чтобы мы не получали сигнал о том, что был потерян управляющий терминал, что вообще-то приведёт к завершению процесса

q: Зачем мы подключили файловые дескрипторы 0, 1, 2?
a: Чтобы можно было использовать функции стандартных библиотек ввода-вывода и они не выдавали ошибки

q: Почему три цифры в PID одинаковые, а в TTY знак вопроса?
a: Демон является лидером группы и сессии. Знак вопроса означает, что нет управляющего терминала


q: Покажите PID процесса в lock-файле
a: Переходим в папку var/run, показываем содержимое файла mydemon.pid (или см. в коде имя LOCKFILE)
	>cd var/run
	>cat mydemon.pid

q: Что такое процесс-демон?
a: Это процесс, не имеющий управляющего терминала, который соответственно не взаимодействует с пользователем. Как правило демоны предоставляют системе различные сервисы.

q: Покажите место в коде, где процесс становится демоном
a: Вызов функции demonize(cmd) в main.c

q: Что мы тут делаем(там где sigaction, SIGHUP)
a: Игнорируем сигнал о потере терминала.